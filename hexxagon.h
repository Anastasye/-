#ifndef HEXXAGON_H
#define HEXXAGON_H

#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <utility>
#include <map>
#include <sstream>

/*
 * @class GameBoard
 * @brief §¬§Ý§Ñ§ã§ã, §á§â§Ö§Õ§ã§ä§Ñ§Ó§Ý§ñ§ð§ë§Ú§Û §Ú§Ô§â§à§Ó§à§Ö §á§à§Ý§Ö §Õ§Ý§ñ §Ú§Ô§â§í §Ó §·§Ö§Ü§ã§Ñ§Ô§à§ß.
 */
class GameBoard {
public:
    GameBoard();

    /*
     * @brief §ª§ß§Ú§è§Ú§Ñ§Ý§Ú§Ù§Ú§â§å§Ö§ä §Ú§Ô§â§à§Ó§à§Ö §á§à§Ý§Ö §Ù§Ñ§Õ§Ñ§ß§ß§à§Ô§à §â§Ñ§Ù§Þ§Ö§â§Ñ.
     * @param newSize §¯§à§Ó§í§Û §â§Ñ§Ù§Þ§Ö§â §Ú§Ô§â§à§Ó§à§Ô§à §á§à§Ý§ñ.
     */
    void initializeBoard(int newSize);

    /*
     * @brief §©§Ñ§Ô§â§å§Ø§Ñ§Ö§ä §ã§à§ã§ä§à§ñ§ß§Ú§Ö §Ú§Ô§â§í §Ú§Ù §æ§Ñ§Û§Ý§Ñ.
     * @param filename §ª§Þ§ñ §æ§Ñ§Û§Ý§Ñ, §Ú§Ù §Ü§à§ä§à§â§à§Ô§à §Ù§Ñ§Ô§â§å§Ø§Ñ§Ö§ä§ã§ñ §ã§à§ã§ä§à§ñ§ß§Ú§Ö §Ú§Ô§â§í.
     */
    void loadGameState(const std::string& filename);

    /*
     * @brief §±§Ö§é§Ñ§ä§Ñ§Ö§ä §ä§Ö§Ü§å§ë§Ö§Ö §ã§à§ã§ä§à§ñ§ß§Ú§Ö §Ú§Ô§â§à§Ó§à§Ô§à §á§à§Ý§ñ.
     */
    void printBoard() const;

    /*
     * @brief §³§à§ç§â§Ñ§ß§ñ§Ö§ä §ä§Ö§Ü§å§ë§Ö§Ö §ã§à§ã§ä§à§ñ§ß§Ú§Ö §Ú§Ô§â§í §Ó §æ§Ñ§Û§Ý.
     * @param filename §ª§Þ§ñ §æ§Ñ§Û§Ý§Ñ, §Ó §Ü§à§ä§à§â§í§Û §ã§à§ç§â§Ñ§ß§ñ§Ö§ä§ã§ñ §ã§à§ã§ä§à§ñ§ß§Ú§Ö §Ú§Ô§â§í.
     */
    void saveGame(const std::string& filename) const;

    /*
     * @brief §µ§Õ§Ó§Ñ§Ú§Ó§Ñ§Ö§ä §æ§Ú§ê§Ü§å §ß§Ñ §Ú§Ô§â§à§Ó§à§Þ §á§à§Ý§Ö.
     * @param chip §¶§Ú§ê§Ü§Ñ, §Ü§à§ä§à§â§å§ð §ß§å§Ø§ß§à §å§Õ§Ó§à§Ú§ä§î.
     * @param row §³§ä§â§à§Ü§Ñ, §Ó §Ü§à§ä§à§â§à§Û §ß§Ñ§ç§à§Õ§Ú§ä§ã§ñ §æ§Ú§ê§Ü§Ñ.
     * @param column §³§ä§à§Ý§Ò§Ö§è, §Ó §Ü§à§ä§à§â§à§Þ §ß§Ñ§ç§à§Õ§Ú§ä§ã§ñ §æ§Ú§ê§Ü§Ñ.
     * @return true, §Ö§ã§Ý§Ú §å§Õ§Ó§à§Ö§ß§Ú§Ö §á§â§à§ê§Ý§à §å§ã§á§Ö§ê§ß§à; §Ú§ß§Ñ§é§Ö false.
     */
    bool doubleChip(char chip, int row, int column);

    /*
     * @brief §±§Ö§â§Ö§Þ§Ö§ë§Ñ§Ö§ä §æ§Ú§ê§Ü§å §ã §à§Õ§ß§à§Ô§à §Þ§Ö§ã§ä§Ñ §ß§Ñ §Õ§â§å§Ô§à§Ö.
     * @param sourceRow §ª§ã§ç§à§Õ§ß§Ñ§ñ §ã§ä§â§à§Ü§Ñ.
     * @param sourceColumn §ª§ã§ç§à§Õ§ß§í§Û §ã§ä§à§Ý§Ò§Ö§è.
     * @param targetRow §¸§Ö§Ý§Ö§Ó§Ñ§ñ §ã§ä§â§à§Ü§Ñ.
     * @param targetColumn §¸§Ö§Ý§Ö§Ó§à§Û §ã§ä§à§Ý§Ò§Ö§è.
     * @param currentPlayer §´§Ö§Ü§å§ë§Ú§Û §Ú§Ô§â§à§Ü.
     * @return true, §Ö§ã§Ý§Ú §á§Ö§â§Ö§Þ§Ö§ë§Ö§ß§Ú§Ö §á§â§à§ê§Ý§à §å§ã§á§Ö§ê§ß§à; §Ú§ß§Ñ§é§Ö false.
     */
    bool moveChip(int sourceRow, int sourceColumn, int targetRow, int targetColumn, char currentPlayer);

    /*
     * @brief §·§à§Õ §Ü§à§Þ§á§î§ð§ä§Ö§â§Ñ.
     * @param computerChip §¶§Ú§ê§Ü§Ñ §Ü§à§Þ§á§î§ð§ä§Ö§â§Ñ.
     */
    void computerMove(char computerChip);

    /*
     * @brief §±§â§à§Ó§Ö§â§ñ§Ö§ä, §Ö§ã§ä§î §Ý§Ú §å §Ú§Ô§â§à§Ü§Ñ §æ§Ú§ê§Ü§Ú.
     * @param chip §¶§Ú§ê§Ü§Ñ, §Ü§à§ä§à§â§å§ð §ß§å§Ø§ß§à §á§â§à§Ó§Ö§â§Ú§ä§î.
     * @return true, §Ö§ã§Ý§Ú §æ§Ú§ê§Ü§Ú §Ö§ã§ä§î; §Ú§ß§Ñ§é§Ö false.
     */
    bool hasChips(char chip) const;

    /*
     * @brief §±§â§à§Ó§Ö§â§ñ§Ö§ä, §ñ§Ó§Ý§ñ§Ö§ä§ã§ñ §Ý§Ú §ç§à§Õ §Õ§à§á§å§ã§ä§Ú§Þ§í§Þ.
     * @param targetRow §¸§Ö§Ý§Ö§Ó§Ñ§ñ §ã§ä§â§à§Ü§Ñ.
     * @param targetColumn §¸§Ö§Ý§Ö§Ó§à§Û §ã§ä§à§Ý§Ò§Ö§è.
     * @return true, §Ö§ã§Ý§Ú §ç§à§Õ §Õ§à§á§å§ã§ä§Ú§Þ; §Ú§ß§Ñ§é§Ö false.
     */
    bool isMoveValid(int targetRow, int targetColumn) const;

    /*
     * @brief §±§à§Ý§å§é§Ñ§Ö§ä §ã§á§Ú§ã§à§Ü §Õ§à§á§å§ã§ä§Ú§Þ§í§ç §ç§à§Õ§à§Ó §Õ§Ý§ñ §æ§Ú§ê§Ü§Ú.
     * @param row §³§ä§â§à§Ü§Ñ, §Ó §Ü§à§ä§à§â§à§Û §ß§Ñ§ç§à§Õ§Ú§ä§ã§ñ §æ§Ú§ê§Ü§Ñ.
     * @param column §³§ä§à§Ý§Ò§Ö§è, §Ó §Ü§à§ä§à§â§à§Þ §ß§Ñ§ç§à§Õ§Ú§ä§ã§ñ §æ§Ú§ê§Ü§Ñ.
     * @return §£§Ö§Ü§ä§à§â §á§Ñ§â, §á§â§Ö§Õ§ã§ä§Ñ§Ó§Ý§ñ§ð§ë§Ú§ç §Õ§à§á§å§ã§ä§Ú§Þ§í§Ö §ç§à§Õ§í.
     */
    std::vector<std::pair<int, int>> getValidMoves(int row, int column) const;

    /*
     * \brief §±§â§à§Ó§Ö§â§ñ§Ö§ä, §Ö§ã§ä§î §Ý§Ú §Õ§à§ã§ä§å§á§ß§í§Ö §ç§à§Õ§í §å §Ú§Ô§â§à§Ü§Ñ.
     * \param [in] playerChip  {§¶§Ú§ê§Ü§Ñ §Ú§Ô§â§à§Ü§Ñ.}
     * \return true, §Ö§ã§Ý§Ú §Õ§à§ã§ä§å§á§ß§í§Ö §ç§à§Õ§í §Ö§ã§ä§î; §Ú§ß§Ñ§é§Ö false.
     */
    bool hasAvailableMoves(char playerChip) const;

    /*
     * @brief §±§â§à§Ó§Ö§â§ñ§Ö§ä, §Ù§Ñ§á§à§Ý§ß§Ö§ß§à §Ý§Ú §Ú§Ô§â§à§Ó§à§Ö §á§à§Ý§Ö.
     * @return true, §Ö§ã§Ý§Ú §á§à§Ý§Ö §Ù§Ñ§á§à§Ý§ß§Ö§ß§à; §Ú§ß§Ñ§é§Ö false.
     */
    bool isFull();

    /*
     * \brief §³§é§Ú§ä§Ñ§Ö§ä §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §æ§Ú§ê§Ö§Ü §à§á§â§Ö§Õ§Ö§Ý§Ö§ß§ß§à§Ô§à §è§Ó§Ö§ä§Ñ.
     * \param [in] chip {§¶§Ú§ê§Ü§Ñ, §Ü§à§ä§à§â§å§ð §ß§å§Ø§ß§à §á§à§ã§é§Ú§ä§Ñ§ä§î.}
     * \return §¬§à§Ý§Ú§é§Ö§ã§ä§Ó§à §æ§Ú§ê§Ö§Ü.
     */
    int countChips(char chip);

    /*
     * @brief §±§â§à§Ó§Ö§â§ñ§Ö§ä, §ñ§Ó§Ý§ñ§Ö§ä§ã§ñ §Ý§Ú §ç§à§Õ §Õ§à§á§å§ã§ä§Ú§Þ§í§Þ.
     * @param targetRow §¸§Ö§Ý§Ö§Ó§Ñ§ñ §ã§ä§â§à§Ü§Ñ.
     * @param targetColumn §¸§Ö§Ý§Ö§Ó§à§Û §ã§ä§à§Ý§Ò§Ö§è.
     * @return true, §Ö§ã§Ý§Ú §ç§à§Õ §Õ§à§á§å§ã§ä§Ú§Þ; §Ú§ß§Ñ§é§Ö false.
     */
    bool isValidMove(int targetRow, int targetColumn);

private:
    std::vector<std::vector<char>> board;  ///< §ª§Ô§â§à§Ó§à§Ö §á§à§Ý§Ö.
    int size;                                ///< §²§Ñ§Ù§Þ§Ö§â §Ú§Ô§â§à§Ó§à§Ô§à §á§à§Ý§ñ.

    /*
     * @brief §£§í§é§Ú§ã§Ý§ñ§Ö§ä §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §ã§ä§à§Ý§Ò§è§à§Ó §Ó §ã§ä§â§à§Ü§Ö.
     * @param row §³§ä§â§à§Ü§Ñ, §Õ§Ý§ñ §Ü§à§ä§à§â§à§Û §ß§å§Ø§ß§à §Ó§í§é§Ú§ã§Ý§Ú§ä§î §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §ã§ä§à§Ý§Ò§è§à§Ó.
     * @return §¬§à§Ý§Ú§é§Ö§ã§ä§Ó§à §ã§ä§à§Ý§Ò§è§à§Ó.
     */
    int calculateColumnCount(int row) const;

    /*
     * @brief §±§â§à§Ó§Ö§â§ñ§Ö§ä, §Þ§à§Ø§Ö§ä §Ý§Ú §æ§Ú§ê§Ü§Ñ §á§Ö§â§Ö§á§â§í§Ô§ß§å§ä§î §é§Ö§â§Ö§Ù §Õ§â§å§Ô§å§ð §æ§Ú§ê§Ü§å.
     * @param sourceRow §ª§ã§ç§à§Õ§ß§Ñ§ñ §ã§ä§â§à§Ü§Ñ.
     * @param sourceColumn §ª§ã§ç§à§Õ§ß§í§Û §ã§ä§à§Ý§Ò§Ö§è.
     * @param targetRow §¸§Ö§Ý§Ö§Ó§Ñ§ñ §ã§ä§â§à§Ü§Ñ.
     * @param targetColumn §¸§Ö§Ý§Ö§Ó§à§Û §ã§ä§à§Ý§Ò§Ö§è.
     * @return true, §Ö§ã§Ý§Ú §á§Ö§â§Ö§á§â§í§Ô§ß§å§ä§î §Þ§à§Ø§ß§à; §Ú§ß§Ñ§é§Ö false.
     */
    bool canJumpOverChip(int sourceRow, int sourceColumn, int targetRow, int targetColumn) const;

    /*
     * @brief §©§Ñ§ç§Ó§Ñ§ä§í§Ó§Ñ§Ö§ä §æ§Ú§ê§Ü§å §á§â§à§ä§Ú§Ó§ß§Ú§Ü§Ñ.
     * @param row §³§ä§â§à§Ü§Ñ, §Ó §Ü§à§ä§à§â§à§Û §ß§Ñ§ç§à§Õ§Ú§ä§ã§ñ §æ§Ú§ê§Ü§Ñ.
     * @param column §³§ä§à§Ý§Ò§Ö§è, §Ó §Ü§à§ä§à§â§à§Þ §ß§Ñ§ç§à§Õ§Ú§ä§ã§ñ §æ§Ú§ê§Ü§Ñ.
     * @param chip §¶§Ú§ê§Ü§Ñ, §Ü§à§ä§à§â§Ñ§ñ §Ù§Ñ§ç§Ó§Ñ§ä§í§Ó§Ñ§Ö§ä.
     */
    void captureOpponentChip(int row, int column, char chip);
};
/*
 * @class PlayerStats
 * @brief §¬§Ý§Ñ§ã§ã §Õ§Ý§ñ §ç§â§Ñ§ß§Ö§ß§Ú§ñ §ã§ä§Ñ§ä§Ú§ã§ä§Ú§Ü§Ú §Ú§Ô§â§à§Ü§Ñ. 
 */
class PlayerStats {
public:
    std::string playerName; ///< §ª§Þ§ñ §Ú§Ô§â§à§Ü§Ñ
    int wins;               ///< §¬§à§Ý§Ú§é§Ö§ã§ä§Ó§à §á§à§Ò§Ö§Õ
    int losses;             ///< §¬§à§Ý§Ú§é§Ö§ã§ä§Ó§à §á§à§â§Ñ§Ø§Ö§ß§Ú§Û

    /*
     * @brief §¬§à§ß§ã§ä§â§å§Ü§ä§à§â §á§à §å§Þ§à§Ý§é§Ñ§ß§Ú§ð.
     * §ª§ß§Ú§è§Ú§Ñ§Ý§Ú§Ù§Ú§â§å§Ö§ä §Ú§Þ§ñ §Ú§Ô§â§à§Ü§Ñ §á§å§ã§ä§à§Û §ã§ä§â§à§Ü§à§Û, §Ñ §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §á§à§Ò§Ö§Õ §Ú §á§à§â§Ñ§Ø§Ö§ß§Ú§Û - §ß§å§Ý§Ö§Þ.
     */
    PlayerStats() : playerName(""), wins(0), losses(0) {}

    /*
     * @brief §¬§à§ß§ã§ä§â§å§Ü§ä§à§â §ã §á§Ñ§â§Ñ§Þ§Ö§ä§â§à§Þ.
     * @param [in] name §ª§Þ§ñ §Ú§Ô§â§à§Ü§Ñ.
     * §ª§ß§Ú§è§Ú§Ñ§Ý§Ú§Ù§Ú§â§å§Ö§ä §Ú§Þ§ñ §Ú§Ô§â§à§Ü§Ñ §Ù§Ñ§Õ§Ñ§ß§ß§í§Þ §Ù§ß§Ñ§é§Ö§ß§Ú§Ö§Þ, §Ñ §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §á§à§Ò§Ö§Õ §Ú §á§à§â§Ñ§Ø§Ö§ß§Ú§Û - §ß§å§Ý§Ö§Þ.
     */
    PlayerStats(const std::string& name)
        : playerName(name), wins(0), losses(0) {
    }

    /*
     * @brief §¬§à§ß§ã§ä§â§å§Ü§ä§à§â §Õ§Ý§ñ §Ú§ß§Ú§è§Ú§Ñ§Ý§Ú§Ù§Ñ§è§Ú§Ú §ã §Õ§Ñ§ß§ß§í§Þ§Ú.
     * @param  name §ª§Þ§ñ §Ú§Ô§â§à§Ü§Ñ.
     * @param  w §¬§à§Ý§Ú§é§Ö§ã§ä§Ó§à §á§à§Ò§Ö§Õ.
     * @param l §¬§à§Ý§Ú§é§Ö§ã§ä§Ó§à §á§à§â§Ñ§Ø§Ö§ß§Ú§Û.
     * §ª§ß§Ú§è§Ú§Ñ§Ý§Ú§Ù§Ú§â§å§Ö§ä §Ú§Þ§ñ §Ú§Ô§â§à§Ü§Ñ, §Ü§à§Ý§Ú§é§Ö§ã§ä§Ó§à §á§à§Ò§Ö§Õ §Ú §á§à§â§Ñ§Ø§Ö§ß§Ú§Û §Ù§Ñ§Õ§Ñ§ß§ß§í§Þ§Ú §Ù§ß§Ñ§é§Ö§ß§Ú§ñ§Þ§Ú.
     */
    PlayerStats(const std::string& name, int w, int l)
        : playerName(name), wins(w), losses(l) {
    }
};


/*
 * @class GameStatistics
 * @brief §¬§Ý§Ñ§ã§ã, §á§â§Ö§Õ§ã§ä§Ñ§Ó§Ý§ñ§ð§ë§Ú§Û §ã§ä§Ñ§ä§Ú§ã§ä§Ú§Ü§å §Ú§Ô§â.
 */
class GameStatistics {
public:
    GameStatistics(const std::string& filename);

    /*
     * @brief §¥§à§Ò§Ñ§Ó§Ý§ñ§Ö§ä §â§Ö§Ù§å§Ý§î§ä§Ñ§ä §Ú§Ô§â§í.
     * @param playerName §ª§Þ§ñ §Ú§Ô§â§à§Ü§Ñ.
     * @param won §²§Ö§Ù§å§Ý§î§ä§Ñ§ä §Ú§Ô§â§í (§Ó§í§Ú§Ô§â§Ñ§Ý §Ú§Ý§Ú §á§â§à§Ú§Ô§â§Ñ§Ý).
     */
    void addGameResult(const std::string& playerName, bool won);

    /*
     * @brief §³§à§ç§â§Ñ§ß§ñ§Ö§ä §ã§ä§Ñ§ä§Ú§ã§ä§Ú§Ü§å §Ó §æ§Ñ§Û§Ý.
     */
    void saveStatistics();
    void loadStatistics();
    /*
     * @brief §±§Ö§é§Ñ§ä§Ñ§Ö§ä §ã§ä§Ñ§ä§Ú§ã§ä§Ú§Ü§å §Ú§Ô§â.
     */
    void printStatistics();

private:
    std::string filename;  ///< §ª§Þ§ñ §æ§Ñ§Û§Ý§Ñ §Õ§Ý§ñ §ã§à§ç§â§Ñ§ß§Ö§ß§Ú§ñ §ã§ä§Ñ§ä§Ú§ã§ä§Ú§Ü§Ú.
    std::map<std::string, PlayerStats> existingStats;   ///< (§Ú§Þ§ñ §Ú§Ô§â§à§Ü§Ñ, (§á§à§Ò§Ö§Õ§í, §á§à§â§Ñ§Ø§Ö§ß§Ú§ñ))
};

/*
 * @class Game
 * @brief §¬§Ý§Ñ§ã§ã, §á§â§Ö§Õ§ã§ä§Ñ§Ó§Ý§ñ§ð§ë§Ú§Û §Ú§Ô§â§å §Ó §·§Ö§Ü§ã§Ñ§Ô§à§ß.
 */
class Game {
public:
    Game(const std::string& inputFile, const std::string& outputFile);

    /*
     * @brief §©§Ñ§á§å§ã§Ü§Ñ§Ö§ä §Ú§Ô§â§å.
     */
    void start();

private:
    GameBoard gameBoard;                   ///< §ª§Ô§â§à§Ó§à§Ö §á§à§Ý§Ö.
    std::string inputFilename;             ///< §ª§Þ§ñ §æ§Ñ§Û§Ý§Ñ §Õ§Ý§ñ §Ù§Ñ§Ô§â§å§Ù§Ü§Ú §ã§à§ã§ä§à§ñ§ß§Ú§ñ §Ú§Ô§â§í.
    std::string outputFilename;            ///< §ª§Þ§ñ §æ§Ñ§Û§Ý§Ñ §Õ§Ý§ñ §ã§à§ç§â§Ñ§ß§Ö§ß§Ú§ñ §ã§à§ã§ä§à§ñ§ß§Ú§ñ §Ú§Ô§â§í.
    char currentPlayer;                    ///< §´§Ö§Ü§å§ë§Ú§Û §Ú§Ô§â§à§Ü.
    int gameMode;                          ///< §²§Ö§Ø§Ú§Þ §Ú§Ô§â§í (§é§Ö§Ý§à§Ó§Ö§Ü §Ú§Ý§Ú §Ü§à§Þ§á§î§ð§ä§Ö§â).
    GameStatistics stats;                  ///< §³§ä§Ñ§ä§Ú§ã§ä§Ú§Ü§Ñ §Ú§Ô§â.
    std::string player1, player2;          ///< §ª§Þ§Ö§ß§Ñ §Ú§Ô§â§à§Ü§à§Ó.

    /*
     * @brief §£§í§Ò§Ú§â§Ñ§Ö§ä §â§Ö§Ø§Ú§Þ §Ú§Ô§â§í.
     */
    void selectGameMode();

    /*
     * @brief §£§í§á§à§Ý§ß§ñ§Ö§ä §ç§à§Õ §Ú§Ô§â§à§Ü§Ñ.
     * @return true, §Ö§ã§Ý§Ú §ç§à§Õ §Ò§í§Ý §å§ã§á§Ö§ê§ß§í§Þ; §Ú§ß§Ñ§é§Ö false.
     */
    bool playerTurn();

    /*
     * @brief §®§Ö§ß§ñ§Ö§ä §ä§Ö§Ü§å§ë§Ö§Ô§à §Ú§Ô§â§à§Ü§Ñ.
     */
    void switchPlayers();
};

#endif 